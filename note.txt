project -> myshop

application -> shop

#register in project
 
# update models.py in shop
from django.db import models

class Category(models.Model):
	name = models.CharField(max_length=200, db_index=True)
	slug = models.SlugField(max_length=200, unique=True)

	class Meta:
		ordering = ('name',)
		verbose_name = 'category'
		verbose_name_plural = 'categories'

	def __str__(self):
		return self.name

class Product(models.Model):
	category = models.ForeignKey(Category, related_name='products', on_delete=models.CASCADE)
	name = models.CharField(max_length=200, db_index=True)
	slug = models.SlugField(max_length=200, db_index=True)
	image = models.ImageField(upload_to='products/%Y/%m/%d', blank=True)
	description = models.TextField(blank=True)
	price = models.DecimalField(max_digits=10, decimal_places=2)
	available = models.BooleanField(default=True)
	created = models.DateTimeField(auto_now_add=True)
	updated = models.DateTimeField(auto_now=True)

	class __str__(self):
		ordering = ('name',)
		index_together = (('id', 'slug'),)

	def __str__(self):
		return self.name

# pip install Pillow==5.1.0

# make migrations 

# create superuser

# update admin.py in shop
from django.contrib import admin
from .models import Category, Product

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
	list_display = ['name', 'slug']
	prepopulated_fields = {'slug': ('name',)}

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
	list_display = ['name', 'slug', 'price', 'available', 'created', 'updated']
	list_filter = ['available', 'created', 'updated']
	list_editable = ['price', 'available']
	prepopulated_fields = {'slug' : ('name',)}


# update views.py in shop
from django.shortcuts import render, get_object_or_404
from .models import Category, Product

def product_list(request, category_slug=None):
	category = None
	categories = Category.objects.all()
	products = Product.objects.filter(available=True)
	if category_slug:
		category = get_object_or_404(Category, slug=category_slug)
		products = products.filter(category=category)
	return render(request, 'shop/product/list.html', {'category':category, 'categories':categories, 'products':products})

def product_detail(request, id, slug):
	product = get_object_or_404(Product, id=id, slug=slug, available=True)
	return render(request, 'shop/product/detail.html', {'product':product})


# create urls.py in shop
from django.urls import path
from .import views

app_name = 'shop'

urlpatterns = [
	path('', views.product_list, name='product_list'),
	path('<slug:category_slug>/', views.product_list, name='product_list_by_category'),
	path('<int:id>/<slug:slug>/', views.product_detail, name='product_detail'),
]

# update urls.py in myshop
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('shop.urls', namespace='shop')),
]


# update models.py in shop
from django.db import models
from django.urls import reverse

class Category(models.Model):
	name = models.CharField(max_length=200, db_index=True)
	slug = models.SlugField(max_length=200, unique=True)

	class Meta:
		ordering = ('name',)
		verbose_name = 'category'
		verbose_name_plural = 'categories'

	def __str__(self):
		return self.name

	def get_absolute_url(self):
		return reverse('shop:product_list_by_category', args=[self.slug])

class Product(models.Model):
	category = models.ForeignKey(Category, related_name='products', on_delete=models.CASCADE)
	name = models.CharField(max_length=200, db_index=True)
	slug = models.SlugField(max_length=200, db_index=True)
	image = models.ImageField(upload_to='products/%Y/%m/%d', blank=True)
	description = models.TextField(blank=True)
	price = models.DecimalField(max_digits=10, decimal_places=2)
	available = models.BooleanField(default=True)
	created = models.DateTimeField(auto_now_add=True)
	updated = models.DateTimeField(auto_now=True)

	class Meta:
		ordering = ('name',)
		index_together = (('id', 'slug'),)

	def __str__(self):
		return self.name

	def get_absolute_url(self):
		return reverse('shop:product_detail', args=[self.id, self.slug])


# creating catalog templates
templates/
		shop/
			base.html
			product/
				list.html
				detail.html

# base.html
<!DOCTYPE html>
<html>
<head>
	<title>{% block title %}My Shop{% endblock %}</title>
</head>
<body>
{% block content %}

{% endblock %}
</body>
</html>

# list.html
{% extends 'shop/base.html' %}
{% block title %}
{% if title %}
	{{ category.name }}
{% else %}
	Products
{% endif %}
{% endblock %}
{% block content %}
	<h2>Categories</h2>
	<ul>
		<li>
			<a href="{% url 'shop:product_list' %}">
				All products
			</a>
		</li>
		{% for c in categories %}
			<li>
				<a href="{{ c.get_absolute_url }}">
					{{ c.name }}
				</a>
			</li>
		{% endfor %}
	</ul>
	<hr>
<h2>{% if category %}{{ category.name }}{% else %}All Products{% endif %}</h2>
{% for product in products %}
	<a href="{{ product.get_absolute_url }}">
		<img src="{% if product.image %}{{ product.image.url }}{% else %}https://elcopcbonline.com/photos/product/4/176/4.jpg{% endif %}">
	</a>
	<a href="{{ product.get_absolute_url }}">
		{{ product.name }}
	</a>
	{{ product.price }}
{% endfor %}
{% endblock %}

# add media url in myshop settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# add codes in urls.py in myshop

from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
	...
]
if settings.DEBUG:
	urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# detail.html in shop
{% extends 'shop/base.html' %}
{% block title %}
	{{ product.name }}
{% endblock %}
{% block content %}


<img src="{% if product.image %}{{ product.image.url }}{% else %}https://elcopcbonline.com/photos/product/4/176/4.jpg{% endif %}">

{{ product.name }}

<a href="{{ product.category.get_absolute_url }}">
	{{ product.category }}
</a>

{{ product.price }}

{{ product.description|linebreaks }}

{% endblock %}

Django Sessions
===============
# add sessions to settings.py in myshop
CART_SESSION_ID = 'cart'

python manage.py startapp cart

application -> cart

# register in installed_apps in settings.py myshop

# create cart.py in cart 
from decimal import Decimal 
from django.conf import settings
from shop.models import Product

class Cart(object):
	def __init__(self, request):
		self.session = request.session
		cart = self.session.get(settings.CART_SESSION_ID)
		if not cart:
			cart = self.session[settings.CART_SESSION_ID] = {}
		self.cart = cart

	def add(self, product, quantity=1, update_quantity=False):
		product_id = str(product.id)
		if product_id not in self.cart:
			self.cart[product_id] = {'quantity':0, 'price':str(product.price)}
		if update_quantity:
			self.cart[product_id]['quantity'] = quantity
		else:
			self.cart[product_id]['quantity'] += quantity
		self.save()

	def save(self):
		self.session.modified = True

	def remove(self, product):
		product_id = str(product.id)
		if product_id in self.cart:
			del self.cart[product_id]
			self.save()

	def __iter__(self):
		product_ids = self.cart.keys()
		products = Product.objects.filter(id__in=product_ids)
		cart = self.cart.copy()
		for product in products:
			cart[str(product.id)]['product'] = product
		for item in cart.values():
			item['price'] = Decimal(item['price'])
			item['total_price'] = item['price'] * item['quantity']
			yield item

	def __len__(self):
		return sum(item['quantity'] for item in self.cart.values())

	def get_total_price(self):
		return sum(Decimal(item['price']) * item['quantity'] for item in self.cart.values())

	def clear(self):
		del self.session[settings.CART_SESSION_ID]
		self.save()

# create forms.py in cart
from django import forms 

PRODUCT_QUANTITY_CHOICES = [(i, str(i)) for i in range(1, 21)]
class CartAddProductForm(forms.Form):
	quantity = forms.TypedChoiceField(choices=PRODUCT_QUANTITY_CHOICES, coerce=int)
	update = forms.BooleanField(required=False, initial=False, widget=forms.HiddenInput)

# update views.py in cart application
from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.http import require_POST
from shop.models import Product
from .cart import Cart 
from .forms import CartAddProductForm

@require_POST
def cart_add(request, product_id):
	cart = Cart(request)
	product = get_object_or_404(Product, id=product_id)
	form = CartAddProductForm(request.POST)
	if form.is_valid():
		cd = form.cleaned_data
		cart.add(product=product, quantity=cd['quantity'], update_quantity=cd['update'])
	return redirect('cart:cart_detail')

def cart_remove(request, product_id):
	cart = Cart(request)
	product = get_object_or_404(Product, id=product_id)
	cart.remove(product)
	return redirect('cart:cart_detail')

def cart_detail(request):
	cart = Cart(request)
	return render(request, 'cart/detail.html', {'cart':cart})

# create urls.py in cart 
from django.urls import path
from .import views

app_name = 'cart'

urlpatterns = [
	path('', views.cart_detail, name='cart_detail'),
	path('add/<int:product_id>/', views.cart_add, name='cart_add'),
	path('remove/<int:product_id>/', views.cart_remove, name='cart_remove'),	
]

# update urls.py in myshop
path('cart/', include('cart.urls', namespace='cart')),

# Building template to disply the cart 
templates/
		cart/
			detail.html

# update detail.html in cart 
<!DOCTYPE html>
<html>
<head>
	<title>{% block title %}Your Shopping Cart{% endblock %}</title>
	<style type="text/css">
		.td_image{width: 20px;}
	</style>
</head>
<body>
{% block content %}

<h2>Your Shopping Cart</h2>
<table class="table table-hover">
    <thead>
      <tr>
        <th>Image</th>
        <th>Product</th>
        <th>Quantity</th>
        <th>Remove</th>
        <th>Unit Price</th>
        <th>Price</th>
      </tr>
    </thead>
    <tbody>
{% for item in cart %}
	{% with product=item.product %}
		<tr>
	        <td class="td_image">
	        	<a href="{{ product.get_absolute_url }}">
	        		<img src="{% if product.image %}{{ product.image.url }}{% else %}https://elcopcbonline.com/photos/product/4/176/4.jpg{% endif %}">
	        	</a>
	        </td>
	        <td>{{ product.name }}</td>
	        <td>{{ item.quantity }}</td>
	        <td>
	        	<a href="{% url 'cart:cart_remove' product.id %}">
	        		REMOVE
	        	</a>
	        </td>
	        <td>{{ item.price }} MMK</td>
	        <td>{{ item.total_price }} MMK</td>
      	</tr>
	{% endwith %}
{% endfor %}
		<tr>
			<td colspan="5">Total Price </td>
			<td>{{ cart.get_total_price }} MMK</td>
		</tr>
    </tbody>
  </table>

<a href="{% url 'shop:product_list' %}" class="btn btn-sm btn-outline-info">
	Continue Shopping
</a>
<a href="#" class="btn btn-sm btn-outline-info">
	Checkout
</a>
{% endblock %}
</body>
</html>

# update views.py in shop application 
from django.shortcuts import render, get_object_or_404
from .models import Category, Product
from cart.forms import CartAddProductForm

def product_list(request, category_slug=None):
	category = None
	categories = Category.objects.all()
	products = Product.objects.filter(available=True)
	if category_slug:
		category = get_object_or_404(Category, slug=category_slug)
		products = products.filter(category=category)
	return render(request, 'shop/product/list.html', {'category':category, 'categories':categories, 'products':products})

def product_detail(request, id, slug):
	product = get_object_or_404(Product, id=id, slug=slug, available=True)
	cart_product_form = CartAddProductForm()
	return render(request, 'shop/product/detail.html', {'product':product, 'cart_product_form':cart_product_form})


# edit shop/product/detail.html
{% extends 'shop/base.html' %}
{% block title %}
	{{ product.name }}
{% endblock %}
{% block content %}


<img src="{% if product.image %}{{ product.image.url }}{% else %}https://elcopcbonline.com/photos/product/4/176/4.jpg{% endif %}">

{{ product.name }}

<a href="{{ product.category.get_absolute_url }}">
	{{ product.category }}
</a>

{{ product.price }}

<form action="{% url 'cart:cart_add' product.id %}" method='post' class="form form-control">
	{{ cart_product_form }}
	{% csrf_token %}
	<input type="submit" value="Add to cart">
</form>

{{ product.description|linebreaks }}

{% endblock %}

# updating product quantites in the cart 
# update views.py in cat 
from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.http import require_POST
from shop.models import Product
from .cart import Cart 
from .forms import CartAddProductForm

@require_POST
def cart_add(request, product_id):
	cart = Cart(request)
	product = get_object_or_404(Product, id=product_id)
	form = CartAddProductForm(request.POST)
	if form.is_valid():
		cd = form.cleaned_data
		cart.add(product=product, quantity=cd['quantity'], update_quantity=cd['update'])
	return redirect('cart:cart_detail')

def cart_remove(request, product_id):
	cart = Cart(request)
	product = get_object_or_404(Product, id=product_id)
	cart.remove(product)
	return redirect('cart:cart_detail')

def cart_detail(request):
	cart = Cart(request)
	for item in cart:
		item['update_quantity_form'] = CartAddProductForm(initial={'quantity': item['quantity'], 'update':True})
	return render(request, 'cart/detail.html', {'cart':cart})


# update detail.html in cart 
{% extends "shop/base.html" %}
{% block title %}
	Your Shopping Cart 
{% endblock %}

{% block content %}

<h2>Your Shopping Cart</h2>
<table class="table table-hover">
    <thead>
      <tr>
        <th>Image</th>
        <th>Product</th>
        <th>Quantity</th>
        <th>Remove</th>
        <th>Unit Price</th>
        <th>Price</th>
      </tr>
    </thead>
    <tbody>
{% for item in cart %}
	{% with product=item.product %}
		<tr>
	        <td class="td_image">
	        	<a href="{{ product.get_absolute_url }}">
	        		<img src="{% if product.image %}{{ product.image.url }}{% else %}https://elcopcbonline.com/photos/product/4/176/4.jpg{% endif %}">
	        	</a>
	        </td>
	        <td>{{ product.name }}</td>
	        <td>
	        	<form action="{% url 'cart:cart_add' product.id %}" method="post">
	        		{{ item.update_quantity_form.quantity }}
	        		{{ item.update_quantity_form.update }}
	        		<input type="submit" value="Update">
	        		{% csrf_token %}
	        	</form>
	        </td>
	        <td>
	        	<a href="{% url 'cart:cart_remove' product.id %}">
	        		REMOVE
	        	</a>
	        </td>
	        <td>{{ item.price }} MMK</td>
	        <td>{{ item.total_price }} MMK</td>
      	</tr>
	{% endwith %}
{% endfor %}
		<tr>
			<td colspan="5">Total Price </td>
			<td>{{ cart.get_total_price }} MMK</td>
		</tr>
    </tbody>
  </table>

<a href="{% url 'shop:product_list' %}" class="btn btn-sm btn-outline-info">
	Continue Shopping
</a>
<a href="#" class="btn btn-sm btn-outline-info">
	Checkout
</a>
{% endblock %}


# context processors 

# create context_processors.py in cart 
from .cart import Cart 
def cart(request):
	return {'cart':Cart(request)}

# update settings.py
"""
Django settings for myshop project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'p6$m%f6d(c%fmu$)068jk&-laff-u1q9r#%u2txyimxpdg@-b7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

CART_SESSION_ID = 'cart'
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop.apps.ShopConfig',
    'cart.apps.CartConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart',
            ],
        },
    },
]

WSGI_APPLICATION = 'myshop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# update base.html
<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <title>{% block title %}My Shop{% endblock %}</title>
	<style type="text/css">
		img{width: 200px;}
	</style>
  </head>
  <body>
{% with total_items=cart|length %}
  {% if cart|length > 0 %}
    Your cart : 
    <a href="{% url 'cart:cart_detail' %}">
      {{ total_items }} item{{ total_items|pluralize }} {{ cart.get_total_price }} MMK
    </a>
  {% else %}
    <strong>Your cart is empty</strong>
  {% endif %}
{% endwith %}
{% block content %}

{% endblock %}

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
  </body>
</html>

# registering customer orders 

python manage.py startapp orders 

application -> orders

# register in installed_apps in settings.py of myshop project folder 

# update models.py in orders 
from django.db import models
from shop.models import Product

class Order(models.Model):
	first_name = models.CharField(max_length=50)
	last_name = models.CharField(max_length=50)
	email = models.EmailField()
	address = models.CharField(max_length=200)
	postal_code = models.CharField(max_length=20)
	city = models.CharField(max_length=50)
	created = models.DateTimeField(auto_now_add=True)
	updated = models.DateTimeField(auto_now=True)
	paid = models.BooleanField(default=False)

	class Meta:
		ordering = ('-created',)

	def __str__(self):
		return 'Order {}'.format(self.id)

	def get_total_cost(self):
		return sum(item.get_cost() for item in self.items.all())

class OrderItem(models.Model):
	order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
	product = models.ForeignKey(Product, related_name='order_items', on_delete=models.CASCADE)
	price = models.DecimalField(max_digits=10, decimal_places=2)
	quantity = models.PositiveIntegerField(default=1)

	def __str__(self):
		return '{}'.format(self.id)

	def get_cost(self):
		return self.price * self.quantity


# make migrations orders 

# update admin.py in orders
from django.contrib import admin
from .models import Order, OrderItem

class OrderItemInline(admin.TabularInline):
	model = OrderItem
	raw_id_fields = ['product']

@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
	list_display = ['id', 'first_name', 'last_name', 'email', 'address', 'postal_code', 'city', 'paid', 'created', 'updated']
	list_filter = ['paid', 'created', 'updated']
	inlines = [OrderItemInline]


# create forms.py in orders application
from django import forms
from .models import Order

class OrderCreateForm(forms.ModelForm):
	class Meta:
		model = Order
		fields = ['first_name', 'last_name', 'email', 'address', 'postal_code', 'city']


# update views.py in orders application
from django.shortcuts import render
from .models import OrderItem
from .forms import OrderCreateForm
from cart.cart import Cart 

def order_create(request):
	cart = Cart(request)
	if request.method == 'POST':
		form = OrderCreateForm(request.POST)
		if form.is_valid():
			order = form.save()
			for item in cart:
				OrderItem.objects.create(order=order, product=item['product'], price=item['price'], quantity=item['quantity'])
			cart.clear()
			return render(request, 'orders/order/created.html', {'order':order})

	else:
		form = OrderCreateForm()
	return render(request, 'orders/order/create.html', {'cart':cart, 'form':form})


# create urls.py in orders application 
from django.urls import path
from .import views 

app_name = 'orders'

urlpatterns = [
	path('create/', views.order_create, name='order_create'),
]

# add codes to urls.py in myshop project folder 
path('orders/', include('orders.urls', namespace='orders')),


# update cart/detail.html in cart application folder 
{% extends "shop/base.html" %}
{% block title %}
	Your Shopping Cart 
{% endblock %}

{% block content %}

<h2>Your Shopping Cart</h2>
<table class="table table-hover">
    <thead>
      <tr>
        <th>Image</th>
        <th>Product</th>
        <th>Quantity</th>
        <th>Remove</th>
        <th>Unit Price</th>
        <th>Price</th>
      </tr>
    </thead>
    <tbody>
{% for item in cart %}
	{% with product=item.product %}
		<tr>
	        <td class="td_image">
	        	<a href="{{ product.get_absolute_url }}">
	        		<img src="{% if product.image %}{{ product.image.url }}{% else %}https://elcopcbonline.com/photos/product/4/176/4.jpg{% endif %}">
	        	</a>
	        </td>
	        <td>{{ product.name }}</td>
	        <td>
	        	<form action="{% url 'cart:cart_add' product.id %}" method="post">
	        		{{ item.update_quantity_form.quantity }}
	        		{{ item.update_quantity_form.update }}
	        		<input type="submit" value="Update">
	        		{% csrf_token %}
	        	</form>
	        </td>
	        <td>
	        	<a href="{% url 'cart:cart_remove' product.id %}">
	        		REMOVE
	        	</a>
	        </td>
	        <td>{{ item.price }} MMK</td>
	        <td>{{ item.total_price }} MMK</td>
      	</tr>
	{% endwith %}
{% endfor %}
		<tr>
			<td colspan="5">Total Price </td>
			<td>{{ cart.get_total_price }} MMK</td>
		</tr>
    </tbody>
  </table>

<a href="{% url 'shop:product_list' %}" class="btn btn-sm btn-outline-info">
	Continue Shopping
</a>
<a href="{% url 'orders:order_create' %}" class="btn btn-sm btn-outline-info">
	Checkout
</a>
{% endblock %}


templates/
		orders/
			order/
				create.html
				created.html

# update create.html in orders application
{% extends 'shop/base.html' %}
{% block title %}
	Checkout
{% endblock %}

{% block content %}
<h2>Checkout</h2>
<h3>Your Orders</h3>
<ul>
{% for item in cart %}
	<li>
		{{ item.quantity }} X {{ item.product.name }} = {{ item.total_price }} MMK
	</li>
{% endfor %}
</ul>
<p><strong>Total MMK : {{ cart.get_total_price }} MMK</strong></p>

<form action="." method="post">
	{{ form.as_p }}
	<input type="submit" value="Place Order">
	{% csrf_token %}
</form>
{% endblock %}

# update created.html in orders application
{% extends 'shop/base.html' %}
{% block title %}
	Thank You
{% endblock %}
{% block content %}
	<h2>Thank You</h2>
	<p>မွာယူမွု ေအာင္ျမင္ပါသည္။ အမွာနံပါတ္စဥ္ : {{ order.id }}</p>
{% endblock %}

# creating payment system 
 ???????????????????????


# exporting orders to CSV files 
# update admin.py in orders application folder 
from django.contrib import admin
from .models import Order, OrderItem
import csv
import datetime
from django.http import HttpResponse

class OrderItemInline(admin.TabularInline):
	model = OrderItem
	raw_id_fields = ['product']

def export_to_csv(modeladmin, request, queryset):
	opts = modeladmin.model._meta
	response = HttpResponse(content_type='text/csv')
	response['Content-Disposition'] = 'attachment;'\
		'filename={}.csv'.format(opts.verbose_name)
	writer = csv.writer(response)
	fields = [field for field in opts.get_fields() if not field.many_to_many\
	and not field.one_to_many]
	writer.writerow([field.verbose_name for field in fields])
	for obj in queryset:
		data_row = []
		for field in fields:
			value = getattr(obj, field.name)
			if isinstance(value, datetime.datetime):
				value = value.strftime('%d/%m/%Y')
			data_row.append(value)
		writer.writerow(data_row)
	return response
export_to_csv.short_description = 'Export to CSV'

@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
	list_display = ['id', 'first_name', 'last_name', 'email', 'address', 'postal_code', 'city', 'paid', 'created', 'updated']
	list_filter = ['paid', 'created', 'updated']
	inlines = [OrderItemInline]
	actions = [export_to_csv]

